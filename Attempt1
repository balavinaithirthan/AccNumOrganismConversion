#include "pch.h"
#include <cpprest/http_client.h>
#include <cpprest/filestream.h>
#include <cpprest/containerstream.h>
using namespace utility;                    // Common utilities like string conversions
using namespace web;                        // Common features like URIs.
using namespace web::http;                  // Common HTTP functionality
using namespace web::http::client;          // HTTP client features
using namespace concurrency::streams;       // Asynchronous streams

const std::string PROTIEN_NOT_FOUND = "PROTIEN_NOT_FOUND";
const std::string NO_TARGET_PROTIEN_CODE_FOUND = "NO_TARGET_PROTIEN_CODE_FOUND";


struct ProtientSearchResult {
	std::string sourceProtienCode;
	std::string targetProtienCode;
	std::string sourceProtienName;
	std::string resultantProtienCodes;
};

std::string getProtienName(std::string sourceCode);
std::string getTargetCodes(std::string targetCode, std::string targetProtienName);
void showResult(ProtientSearchResult);
void saveResult(ProtientSearchResult);

int main(int argc, char* argv[])
{
	try
	{
		ProtientSearchResult searchResult;
		// get from user
		searchResult.sourceProtienCode = "P12345";
		searchResult.targetProtienCode = "9606";

		std::string proteinName = getProtienName(searchResult.sourceProtienCode);
		if (proteinName != PROTIEN_NOT_FOUND)
		{
			searchResult.sourceProtienName = proteinName;
			std::string targetCodes = getTargetCodes(searchResult.targetProtienCode, proteinName);
			if (proteinName != NO_TARGET_PROTIEN_CODE_FOUND)
			{
				searchResult.resultantProtienCodes = targetCodes;
				showResult(searchResult);
				saveResult(searchResult);
			}
			else
			{
				std::cout << "No result found for target code " << searchResult.targetProtienCode << std::endl;
			}

		}
		else
		{
			std::cout << "Protient Code : " << searchResult.sourceProtienCode << " not found" << std::endl;
		}

	}
	catch (const std::exception &e)
	{
		std::cout << "Error exception: " << e.what() << std::endl;
	}
	return 0;
}

void showResult(ProtientSearchResult result) {
	std::cout << "Target Code : " << result.sourceProtienCode << std::endl;
	std::cout << "Source Code : " << result.targetProtienCode << std::endl;
	std::cout << "Target Protien Name : " << result.sourceProtienName << std::endl;
	std::cout << "Matching Protien Codes : " << result.resultantProtienCodes << std::endl;
}

void saveResult(ProtientSearchResult result) {

}

std::string getProtienName(std::string code)
{
	string_t url = L"https://www.uniprot.org/uniprot/";
	std::wstring temp(code.length(), L' ');
	std::copy(code.begin(), code.end(), temp.begin());
	url.append(temp);
	url.append(L".txt");
	uri x(url);
	http_client client(x);
	pplx::task<std::string> requestTask = client.request(methods::GET).then([](http_response response) {
		if (response.status_code() == status_codes::OK) {
			auto body = response.extract_string().get();
			std::string str(body.begin(), body.end());
			std::istringstream f(str);
			std::string line;
			std::string proteinName;
			while (std::getline(f, line)) {
				int pos;
				pos = line.find("DE", 0);
				if (pos == 0)
				{
					pos = line.find('=', 0);

					if (pos != std::string::npos)
					{
						proteinName = line.substr(pos + 1, line.length() - (pos + 2));
						return proteinName;
						break;
					}
				}
			}
			return PROTIEN_NOT_FOUND;
		}
	});
	return requestTask.get();
}


std::string getTargetCodes(std::string code, std::string targetProtienName)
{
	std::string queryStr = "organism:" + code + "+AND+" + targetProtienName;
	std::wstring wQueryStr(queryStr.length(), L' ');
	std::copy(queryStr.begin(), queryStr.end(), wQueryStr.begin());
	uri_builder builder;
	builder.append_query(U("query"), wQueryStr);
	builder.append_query(U("format"), U("txt"));
	auto path_query_fragment = builder.to_string();

	http_client client(L"https://www.uniprot.org/uniprot/");
	pplx::task<std::string> requestTask = client.request(methods::GET, path_query_fragment).then([targetProtienName](http_response response) {
		if (response.status_code() == status_codes::OK) {
			auto body = response.extract_string().get();
			std::string str(body.begin(), body.end());
			std::istringstream f(str);
			std::string line;
			std::string proteinName;
			std::string resultantCode;
			bool protienCodeFound = false;
			bool newrecordstarted = false;
			bool protienNameFound = false;
			while (std::getline(f, line)) {
				int position;
				if (!newrecordstarted) {
					position = line.find("ID", 0);
					if (position == 0)
					{
						newrecordstarted = true;
						protienCodeFound = false;
						protienNameFound = false;
					}
				}
				else
				if (!protienCodeFound) {
					position = line.find("AC   ", 0);
					if (position == 0)
					{
						resultantCode = line.substr(5, line.length() - 5);
						protienCodeFound = true;
					}
				}
				else 
				if (!protienNameFound) 
				{
					position = line.find("DE   RecName: Full=", 0);
					if (position != std::string::npos)
					{
						protienNameFound = true;
						position = line.find(targetProtienName, 0);
						if (position != std::string::npos)
						{
							return resultantCode;
						}
						else
							newrecordstarted = false;
					}
				}
			}
			return NO_TARGET_PROTIEN_CODE_FOUND;
		}
	});
	return requestTask.get();
}

